package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"msoft/g1/gqlapi/internal/clients/comment"
	"msoft/g1/gqlapi/internal/graph/generated"
	"msoft/g1/gqlapi/internal/graph/modelgen"
	"msoft/g1/gqlapi/internal/middlewares"
)

// AuthorInfo is the resolver for the authorInfo field.
func (r *commentResolver) AuthorInfo(ctx context.Context, obj *comment.Comment) (*modelgen.AuthorInfo, error) {
	u, err := r.authClient.GetUser(obj.AuthorID)
	if err != nil {
		return nil, err
	}
	return &modelgen.AuthorInfo{Name: u.Name, PictureURL: u.PictureURL}, nil
}

// CommentCreate is the resolver for the commentCreate field.
func (r *mutationResolver) CommentCreate(ctx context.Context, input comment.CreateInput) (*modelgen.CommentCreatePayload, error) {
	u := middlewares.UserForContext(ctx)
	input.AuthorID = u.ID
	cm, err := r.commentClient.Create(&input)
	if err != nil {
		return &modelgen.CommentCreatePayload{Error: &modelgen.Error{Message: err.Error()}}, nil
	}
	return &modelgen.CommentCreatePayload{Comment: cm}, nil
}

// CommentUpdate is the resolver for the commentUpdate field.
func (r *mutationResolver) CommentUpdate(ctx context.Context, id int, input comment.UpdateInput) (*modelgen.CommentUpdatePayload, error) {
	u := middlewares.UserForContext(ctx)
	err := r.checkCommentAuthor(id, u.ID)
	if err != nil {
		return &modelgen.CommentUpdatePayload{Error: &modelgen.Error{Message: err.Error()}}, nil
	}
	cm, err := r.commentClient.Update(id, &input)
	if err != nil {
		return &modelgen.CommentUpdatePayload{Error: &modelgen.Error{Message: err.Error()}}, nil
	}
	return &modelgen.CommentUpdatePayload{Comment: cm}, nil
}

// CommentDelete is the resolver for the commentDelete field.
func (r *mutationResolver) CommentDelete(ctx context.Context, id int) (*modelgen.CommentDeletePayload, error) {
	u := middlewares.UserForContext(ctx)
	err := r.checkCommentAuthor(id, u.ID)
	if err != nil {
		return &modelgen.CommentDeletePayload{Error: &modelgen.Error{Message: err.Error()}}, nil
	}
	err = r.commentClient.Delete(id)
	if err != nil {
		return &modelgen.CommentDeletePayload{Error: &modelgen.Error{Message: err.Error()}}, nil
	}
	return &modelgen.CommentDeletePayload{}, nil
}

// Comment is the resolver for the comment field.
func (r *queryResolver) Comment(ctx context.Context, id int) (*comment.Comment, error) {
	cm, err := r.commentClient.GetByID(id)
	if err != nil {
		return nil, err
	}
	return cm, nil
}

// Comments is the resolver for the comments field.
func (r *queryResolver) Comments(ctx context.Context) ([]*comment.Comment, error) {
	cms, err := r.commentClient.GetAll()
	if err != nil {
		return nil, err
	}
	return cms, nil
}

// Comment returns generated.CommentResolver implementation.
func (r *Resolver) Comment() generated.CommentResolver { return &commentResolver{r} }

type commentResolver struct{ *Resolver }
