package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"msoft/g1/gqlapi/internal/clients/comment"
	"msoft/g1/gqlapi/internal/clients/post"
	"msoft/g1/gqlapi/internal/graph/generated"
	"msoft/g1/gqlapi/internal/graph/modelgen"
	"msoft/g1/gqlapi/internal/middlewares"
)

// PostCreate is the resolver for the postCreate field.
func (r *mutationResolver) PostCreate(ctx context.Context, input post.CreateInput) (*modelgen.PostCreatePayload, error) {
	u := middlewares.UserForContext(ctx)
	input.AuthorID = u.ID
	p, err := r.postClient.Create(&input)
	if err != nil {
		return &modelgen.PostCreatePayload{Error: &modelgen.Error{Message: err.Error()}}, nil
	}
	return &modelgen.PostCreatePayload{Post: p}, nil
}

// PostUpdate is the resolver for the postUpdate field.
func (r *mutationResolver) PostUpdate(ctx context.Context, id int, input post.UpdateInput) (*modelgen.PostUpdatePayload, error) {
	u := middlewares.UserForContext(ctx)
	err := r.checkPostAuthor(id, u.ID)
	if err != nil {
		return &modelgen.PostUpdatePayload{Error: &modelgen.Error{Message: err.Error()}}, nil
	}
	p, err := r.postClient.Update(id, &input)
	if err != nil {
		return &modelgen.PostUpdatePayload{Error: &modelgen.Error{Message: err.Error()}}, nil
	}
	return &modelgen.PostUpdatePayload{Post: p}, nil
}

// PostDelete is the resolver for the postDelete field.
func (r *mutationResolver) PostDelete(ctx context.Context, id int) (*modelgen.PostDeletePayload, error) {
	u := middlewares.UserForContext(ctx)
	err := r.checkPostAuthor(id, u.ID)
	if err != nil {
		return &modelgen.PostDeletePayload{Error: &modelgen.Error{Message: err.Error()}}, nil
	}
	err = r.postClient.Delete(id)
	if err != nil {
		return &modelgen.PostDeletePayload{Error: &modelgen.Error{Message: err.Error()}}, nil
	}
	return &modelgen.PostDeletePayload{}, nil
}

// AuthorInfo is the resolver for the authorInfo field.
func (r *postResolver) AuthorInfo(ctx context.Context, obj *post.Post) (*modelgen.AuthorInfo, error) {
	u, err := r.authClient.GetUser(obj.AuthorID)
	if err != nil {
		return nil, err
	}
	return &modelgen.AuthorInfo{
		Name:       u.Name,
		PictureURL: u.PictureURL,
	}, nil
}

// CommentCount is the resolver for the commentCount field.
func (r *postResolver) CommentCount(ctx context.Context, obj *post.Post) (int32, error) {
	// TODO
	return 0, nil
}

// Comments is the resolver for the comments field.
func (r *postResolver) Comments(ctx context.Context, obj *post.Post) ([]*comment.Comment, error) {
	cms, err := r.commentClient.GetByPostID(obj.ID)
	if err != nil {
		return nil, err
	}
	return cms, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id int) (*post.Post, error) {
	p, err := r.postClient.GetByID(id)
	if err != nil {
		return nil, err
	}
	return p, nil
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context) ([]*post.Post, error) {
	ps, err := r.postClient.GetAll()
	if err != nil {
		return nil, err
	}
	return ps, nil
}

// Post returns generated.PostResolver implementation.
func (r *Resolver) Post() generated.PostResolver { return &postResolver{r} }

type postResolver struct{ *Resolver }
