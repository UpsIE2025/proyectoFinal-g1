package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"encoding/json"
	"log/slog"
	"msoft/g1/gqlapi/internal/graph/modelgen"

	"github.com/IBM/sarama"
)

// AddOrRemoveFCMToken is the resolver for the addOrRemoveFCMToken field.
func (r *mutationResolver) AddOrRemoveFCMToken(ctx context.Context, userID string, addToken *string, removeToken *string) (*modelgen.FCMTokenAddOrRemovePayload, error) {
	var ev struct {
		UserID      string `json:"user_id"`
		AddToken    string `json:"add_token"`
		RemoveToken string `json:"remove_token"`
	}
	ev.UserID = userID
	if addToken != nil {
		ev.AddToken = *addToken
	}
	if removeToken != nil {
		ev.RemoveToken = *removeToken
	}
	data, _ := json.Marshal(ev)
	_, _, err := r.kafkaProd.SendMessage(&sarama.ProducerMessage{
		Topic: "addOrRemoveFcmToken",
		Value: sarama.ByteEncoder(data),
	})
	if err != nil {
		slog.Error(err.Error())
		return &modelgen.FCMTokenAddOrRemovePayload{Error: &modelgen.Error{Message: "Error inesperado"}}, nil
	}
	return &modelgen.FCMTokenAddOrRemovePayload{}, nil
}
