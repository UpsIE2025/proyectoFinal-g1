services:
  postdb:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: post_user
      POSTGRES_PASSWORD: post_hardpass
      POSTGRES_DB: posts
    command: >
      postgres -c wal_level=logical
               -c max_replication_slots=4
               -c max_wal_senders=4
    ports:
      - "5432:5432"
    networks:
      - project-network
  commentdb:
    image: mysql:8.0
    restart: unless-stopped
    environment:
      MYSQL_USER: comment_user
      MYSQL_PASSWORD: comment_hardpass
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: comments
    ports:
      - "3306:3306"
    networks:
      - project-network
  postservice:
    pull_policy: build
    restart: unless-stopped
    build:
      context: .
      dockerfile: postservice.Dockerfile
    environment:
      PORT: 8080
      POSTGRES_DB_HOST: postdb
      POSTGRES_DB_PORT: 5432
      POSTGRES_DB_USER: post_user
      POSTGRES_DB_PASS: post_hardpass
      POSTGRES_DB_NAME: posts
    networks:
      - project-network
    depends_on:
      - postdb
  commentservice:
    pull_policy: build
    restart: unless-stopped
    build:
      context: .
      dockerfile: commentservice.Dockerfile
    environment:
      PORT: 8080
      MYSQL_DB_HOST: commentdb
      MYSQL_DB_PORT: 3306
      MYSQL_DB_USER: comment_user
      MYSQL_DB_PASS: comment_hardpass
      MYSQL_DB_NAME: comments
    networks:
      - project-network
    depends_on:
      - commentdb
  gqlapi:
    pull_policy: build
    restart: unless-stopped
    build:
      context: .
      dockerfile: gqlapi.Dockerfile
    environment:
      API_PORT: 8080
      POST_SERVICE_HOST: postservice
      POST_SERVICE_PORT: 8080
      COMMENT_SERVICE_HOST: commentservice
      COMMENT_SERVICE_PORT: 8080
      AUTH0_DOMAIN: TODO
      AUTH0_AUDIENCE: TODO
      AUTH0_CLIENT_ID: TODO
      AUHT0_CLIENT_SECRET: TODO
    ports:
      - 8080:8080
    networks:
      - project-network
    depends_on:
      - postservice
      - commentservice
  kafka:
    image: apache/kafka-native
    restart: unless-stopped
    ports:
      - "9092:9092"
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://kafka:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT
      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091
      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - project-network
  debezium:
    image: quay.io/debezium/connect:3.0
    restart: unless-stopped
    depends_on:
      - kafka
      - postdb
    links:
      - kafka:kafka
      - postdb:postgres
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9093
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: debezium_connect_configs
      OFFSET_STORAGE_TOPIC: debezium_connect_offsets
      STATUS_STORAGE_TOPIC: debezium_connect_statuses
    networks:
      - project-network
  replicadb:
    image: mariadb:11.7.2
    restart: unless-stopped
    environment:
      MARIADB_USER: replica_user
      MARIADB_PASSWORD: replica_hardpass
      MARIADB_ROOT_PASSWORD: rootpassword
      MARIADB_DATABASE: replica_posts
    ports:
      - "3307:3306"
    networks:
      - project-network
  cdcservice:
    pull_policy: build
    restart: unless-stopped
    build:
      context: .
      dockerfile: cdcservice.Dockerfile
    environment:
      DEBEZIUM_HOST: debezium
      DEBEZIUM_PORT: 8083
      KAFKA_HOST: kafka
      KAFKA_PORT: 9093
      MARIA_DB_USER: replica_user
      MARIA_DB_PASS: replica_hardpass
      MARIA_DB_HOST: replicadb
      MARIA_DB_PORT: 3306
      MARIA_DB_NAME: replica_posts
    networks:
      - project-network
    depends_on:
      - debezium
      - replicadb
  notidb:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_USER: noti_user
      POSTGRES_PASSWORD: noti_hardpass
      POSTGRES_DB: noti
    ports:
      - "5433:5432"
    networks:
      - project-network
  kongapigateway:
    #image: kong/kong-gateway:3.7.1.4-rhel-fips
    build:
      context: .
      dockerfile: kong.Dockerfile
    restart: unless-stopped
    environment:
      - KONG_DATABASE=off
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_LISTEN=0.0.0.0:8001,0.0.0.0:8444 ssl
      - KONG_DECLARATIVE_CONFIG=/kong/declarative/kong.yml
    ports:
      - "8000:8000" # Puerto para tráfico HTTP
      - "8443:8443" # Puerto para tráfico HTTPS
      - "8001:8001" # Puerto para Admin API
      - "8444:8444" # Puerto para Admin API con SSL
    volumes:
      - ./kong/declarative:/kong/declarative # revisar archivo de configuraicon kong.yml
    networks:
      - project-network
    depends_on:
      - gqlapi

networks:
  project-network:
    driver: bridge
